CREATE TABLE IF NOT EXISTS "users" (
  "user_id" varchar PRIMARY KEY UNIQUE NOT NULL,
  "full_name" varchar NOT NULL,
  "email" varchar NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "skills" (
  "skill_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY UNIQUE,
  "application_id" int NOT NULL,
  "skill" varchar NOT NULL,
  "comfort_level" varchar NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "applications" (
  "application_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY UNIQUE,
  "user_id" varchar NOT NULL,
  "contact_name" varchar,
  "employer" varchar NOT NULL,
  "employment_type" varchar NOT NULL,
  "application_status" varchar,
  "application_deadline" timestamp NOT NULL,
  "location" varchar,
  "url" varchar,
  "skills" varchar,
  "date_applied" timestamp,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "contacts" (
  "contact_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY UNIQUE,
  "user_id" varchar NOT NULL,
  "full_name" varchar,
  "position" varchar,
  "email" varchar,
  "phone_number" varchar,
  "linkedin_url" varchar,
  "notes" varchar,
  "created_at" timestamp NOT NULL DEFAULT now(),
  "updated_at" timestamp NOT NULL DEFAULT now()
);

ALTER TABLE "skills" ADD FOREIGN KEY ("application_id") REFERENCES "applications" ("application_id") ON DELETE NO ACTION;

ALTER TABLE "applications" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

ALTER TABLE "contacts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_insert
BEFORE INSERT ON users
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON applications
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON skills
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON contacts
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_insert
BEFORE INSERT ON applications
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_insert
BEFORE INSERT ON skills
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp_insert
BEFORE INSERT ON contacts
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();